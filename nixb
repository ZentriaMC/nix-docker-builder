#!/usr/bin/env bash
set -euo pipefail

# `nix build` wrapper script utilizing remote builders
flags=()

builders_config="${NIX_BUILDERS_CONFIG:-${HOME}/config/nix-builders.nix}"
if [ -f "${builders_config}" ]; then
	builders_string="$(nix-instantiate --eval --json -E '
	let
	  mapAttrsToList = f: a: map (n: f n a.${n}) (builtins.attrNames a);
	  mkBuilder = let
	    join = builtins.concatStringsSep ",";
	  in
	    host:
	    { arches ? [ "-" ]
	    , sshKey ? "-"
	    , parallelBuilds ? "-"
	    , speedFactor ? "-"
	    , requiredFeatures ? [ "-" ]
	    , supportedFeatures ? [ "-" ]
	    , hostED25519Key ? "-"
	    }:
	    builtins.concatStringsSep " " [
	      host
	      (join arches)
	      sshKey
	      parallelBuilds
	      speedFactor
	      (join supportedFeatures)
	      (join requiredFeatures)
	      hostED25519Key
	    ];

	  builders = import '"$(realpath -- "${builders_config}")"';
	in
	builtins.concatStringsSep "; " (mapAttrsToList mkBuilder builders)
	' | jq -r '.')"

	flags+=(
		--builders "${builders_string}"
		--builders-use-substitutes
	)
fi

current_system="$(nix-instantiate --eval -E --json 'builtins.currentSystem' | jq -r '.')"
target_system="${current_system}"
orig_argv=( "${@}" )

while [ -n "${1:-}" ]; do
	arg="${1}"
	case "${arg}" in
		--expr)
			# Skip processing tons of text
			shift
			;;
		--system)
			shift
			target_system="${1}"
			;;
		--store)
			shift
			store_path="${1}"

			if ! [ "${store_path}" = "/nix/store" ] && [ "$(uname -s)" = "Darwin" ]; then
				# error: building using a diverted store is not supported on this platform
				flags+=(--max-jobs 0)
			fi
			;;
	esac
	shift
done

set -- "${orig_argv[@]}"

if ! [ "${current_system}" = "${target_system}" ]; then
	flags+=(--max-jobs 0)
fi

nix "${flags[@]}" "${@}"
